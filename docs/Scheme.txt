V   * загрузить все словоформы подсчитывая их используемость
V   * сохранить их в sqlite-таблице:
V       id      wf      freq
V   * разбить на N-граммы
V       id      ngr     wf_id
V   * выбирать словоформы в порядке убывания длины с используемостью не ниже пороговой (###)
    * сгенерировать таблицу аффиксов:
        1) установить длину предполагаемого аффикса affxlen = 1
        2) для кажой словоформы выбрать кандидатов на составление списка аффиксов
            1) ngrlen = длина слова - affxlen
            2) для всех N-грамм с длинной ngrlen, построенных из текущей словоформы найти всех кандидатов
            3) выкинуть из списка кандидатов:
                * всех, кто длиннее исходной словоформы
                * всех у кого общая часть короче ngrlen
            4) найти представление текущей словоформы, через компоненты (префикс, основа, суффикс). Некоторые компоненты могут быть пустыми
            5) добавить префикс и суффикс в таблицу с подсчетом количества
        3) ++affxlen
        4) перейти к шагу 2)
    * записать таблицу аффиксов в БД
    
    
    
    
    
    
    
V       * найти все N-граммы и по таблице N-грамм сформировать список кандидатов
        * для каждого кандидата посчитать "расстояние-по-максимальной-общей-части" (еще надо реализовать)
          ниже приведены примеры расстояний для некоторых строк
            abcd    abcd    0   // обе строки равны
            abcd    abcx    1   // максимальная общая часть -- первые три символа. Остался 1 символ
            abcd    axcd    2   // максимальная общая часть -- последние два символа. Осталось еще 2 символа
    * кандидаты отсортировать в порядке возрастания расстояния
    * для кандидатов у которых расстояние не меньше пороговой величины (###)
      выделить общую часть. Оставшиеся части добавить в таблицу кандидатов на аффиксы
        id      afx     type    wf_id
      здесь type -- тип предполагаемого аффикса (префикс/суффикс/...)


